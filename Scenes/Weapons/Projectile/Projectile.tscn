[gd_scene load_steps=23 format=3 uid="uid://oqp8xiwqab1k"]

[ext_resource type="Script" path="res://Scenes/Weapons/Projectile/Projectile.cs" id="1_xhpbw"]
[ext_resource type="Shader" path="res://Assets/Shaders/fire.gdshader" id="2_01en1"]
[ext_resource type="Texture2D" uid="uid://xp8din1y2bjr" path="res://Assets/Shaders/Fire/HoleNoise.png" id="3_0ayus"]
[ext_resource type="Texture2D" uid="uid://cr7c1vrygs0ci" path="res://Assets/Shaders/Fire/FireMask.png" id="4_ywyh6"]
[ext_resource type="Texture2D" uid="uid://c8yi6jar2jv6e" path="res://Assets/Shaders/Fire/BlueFireGradient.tres" id="5_ren4o"]
[ext_resource type="Texture2D" uid="uid://doekjcocjde87" path="res://Assets/Shaders/Fire/WispyNoise.png" id="6_7ancd"]

[sub_resource type="SphereShape3D" id="SphereShape3D_2tuna"]
radius = 0.1

[sub_resource type="ShaderMaterial" id="ShaderMaterial_6peo3"]
render_priority = 0
shader = ExtResource("2_01en1")
shader_parameter/emission_intensity = 2.0
shader_parameter/time_scale = 3.0
shader_parameter/texture_scale = Vector2(1, 1)
shader_parameter/edge_softness = 0.1
shader_parameter/noise_texture = ExtResource("3_0ayus")
shader_parameter/texture_mask = ExtResource("4_ywyh6")

[sub_resource type="Curve" id="Curve_qcwtn"]
_data = [Vector2(0, 0), 0.0, 2.8, 0, 0, Vector2(0.597403, 1), 0.0, 0.0, 0, 0, Vector2(1, 1), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_b6wek"]
width = 128
curve = SubResource("Curve_qcwtn")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_pt078"]
lifetime_randomness = 0.81
spread = 3.15
gravity = Vector3(0, 0, 0)
scale_curve = SubResource("CurveTexture_b6wek")
color_ramp = ExtResource("5_ren4o")

[sub_resource type="QuadMesh" id="QuadMesh_usn1t"]
size = Vector2(0.5, 0.5)

[sub_resource type="Shader" id="Shader_aghwx"]
code = "// This shader is based on Minionsart's stylized fire
// https://twitter.com/minionsart/status/1132593681452683264?s=20
shader_type spatial;
render_mode blend_mix;

uniform sampler2D noise_texture;

uniform sampler2D texture_mask;
uniform float emission_intensity = 2.0;
uniform float time_scale = 3.0;
uniform vec2 texture_scale = vec2(1.0);
uniform float edge_softness = 0.1;

varying vec3 world_coord;
varying float world_x_dot;


void vertex() {
    // Billboard code, taken directly from a spatial material
    // create a spatial material, enable billboard with billboard keep scale, and then convert
    // to shader material, and it will create a shader with this code.
    mat4 mat_world = mat4(normalize(INV_VIEW_MATRIX[0])*length(MODEL_MATRIX[0]),normalize(INV_VIEW_MATRIX[1])*length(MODEL_MATRIX[0]),normalize(INV_VIEW_MATRIX[2])*length(MODEL_MATRIX[2]), MODEL_MATRIX[3]);
    mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
    MODELVIEW_MATRIX = VIEW_MATRIX * mat_world;
    
    // We map the coordinates on the vertical planes xy and zy
    // we also calculate how to blend between the two based on where the world space normal
    // is pointing.
    world_coord = (mat_world * vec4(VERTEX, 1.0)).rgb;
    vec4 world_normal = (mat_world * vec4(NORMAL, 0.0));
    world_x_dot =  abs(dot(normalize(world_normal.rgb), vec3(1.0,0.0,0.0)));
}


void fragment() {
	float mask = texture(texture_mask, UV).r;
	
	vec2 time_based_pan = vec2(0.2, 1.0) * (- TIME * time_scale);
	float noise_xy = texture(noise_texture, world_coord.xy * texture_scale + time_based_pan).r;
	float noise_zy = texture(noise_texture, world_coord.zy * texture_scale + time_based_pan + vec2(0.7, 0.3)).r;
	
	float noise = mix(noise_xy, noise_zy, clamp(world_x_dot, 0.0, 1.0));
	
	ALBEDO = COLOR.rgb;
	EMISSION = ALBEDO * emission_intensity;
	
	float erosion_amount = (1.0 - COLOR.a);
	float alpha = (noise * mask) - erosion_amount;
	
	alpha = clamp(alpha, 0.0, 1.0);
	ALPHA = smoothstep(0.0, edge_softness, alpha);
}"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_sgtkj"]
load_path = "res://.godot/imported/FireMask.png-8f0621c8af4db02f58034b8b59697a83.s3tc.ctex"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_n07wl"]
render_priority = 0
shader = SubResource("Shader_aghwx")
shader_parameter/emission_intensity = 2.0
shader_parameter/time_scale = 3.0
shader_parameter/texture_scale = Vector2(2, 2)
shader_parameter/edge_softness = 0.1
shader_parameter/noise_texture = ExtResource("6_7ancd")
shader_parameter/texture_mask = SubResource("CompressedTexture2D_sgtkj")

[sub_resource type="Shader" id="Shader_sc8mu"]
code = "// This shader is based on Minionsart's stylized fire
// https://twitter.com/minionsart/status/1132593681452683264?s=20
shader_type spatial;
render_mode blend_mix;

uniform sampler2D noise_texture;

uniform sampler2D texture_mask;
uniform float emission_intensity = 2.0;
uniform float time_scale = 3.0;
uniform vec2 texture_scale = vec2(1.0);
uniform float edge_softness = 0.1;

varying vec3 world_coord;
varying float world_x_dot;


void vertex() {
    // Billboard code, taken directly from a spatial material
    // create a spatial material, enable billboard with billboard keep scale, and then convert
    // to shader material, and it will create a shader with this code.
    mat4 mat_world = mat4(normalize(INV_VIEW_MATRIX[0])*length(MODEL_MATRIX[0]),normalize(INV_VIEW_MATRIX[1])*length(MODEL_MATRIX[0]),normalize(INV_VIEW_MATRIX[2])*length(MODEL_MATRIX[2]), MODEL_MATRIX[3]);
    mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
    MODELVIEW_MATRIX = VIEW_MATRIX * mat_world;
    
    // We map the coordinates on the vertical planes xy and zy
    // we also calculate how to blend between the two based on where the world space normal
    // is pointing.
    world_coord = (mat_world * vec4(VERTEX, 1.0)).rgb;
    vec4 world_normal = (mat_world * vec4(NORMAL, 0.0));
    world_x_dot =  abs(dot(normalize(world_normal.rgb), vec3(1.0,0.0,0.0)));
}


void fragment() {
	float mask = texture(texture_mask, UV).r;
	
	vec2 time_based_pan = vec2(0.2, 1.0) * (- TIME * time_scale);
	float noise_xy = texture(noise_texture, world_coord.xy * texture_scale + time_based_pan).r;
	float noise_zy = texture(noise_texture, world_coord.zy * texture_scale + time_based_pan + vec2(0.7, 0.3)).r;
	
	float noise = mix(noise_xy, noise_zy, clamp(world_x_dot, 0.0, 1.0));
	
	ALBEDO = COLOR.rgb;
	EMISSION = ALBEDO * emission_intensity;
	
	float erosion_amount = (1.0 - COLOR.a);
	float alpha = (noise * mask) - erosion_amount;
	
	alpha = clamp(alpha, 0.0, 1.0);
	ALPHA = smoothstep(0.0, edge_softness, alpha);
}"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_4k165"]
load_path = "res://.godot/imported/HoleNoise.png-655d0fbf8cb28e9c10897f7a3cecaf9a.s3tc.ctex"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_uabvn"]
load_path = "res://.godot/imported/FireMask.png-8f0621c8af4db02f58034b8b59697a83.s3tc.ctex"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_arycv"]
render_priority = 0
shader = SubResource("Shader_sc8mu")
shader_parameter/emission_intensity = 2.0
shader_parameter/time_scale = 3.0
shader_parameter/texture_scale = Vector2(1, 1)
shader_parameter/edge_softness = 0.1
shader_parameter/noise_texture = SubResource("CompressedTexture2D_4k165")
shader_parameter/texture_mask = SubResource("CompressedTexture2D_uabvn")

[sub_resource type="Animation" id="Animation_8e2hb"]
resource_name = "Hit"
length = 0.79
step = 0.01
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("GunParticles:process_material:scale_min")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.79),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [1.0, 10.0, 1.0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("GunParticles:process_material:scale_max")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1, 0.79),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [1.0, 10.0, 1.0]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("GunParticles:material_override:shader_parameter/texture_scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.1, 0.79),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector2(1, 1), Vector2(2, 2), Vector2(1, 1)]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("GunParticles:material_override")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.79),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [SubResource("ShaderMaterial_n07wl"), SubResource("ShaderMaterial_arycv")]
}

[sub_resource type="Animation" id="Animation_kjdyj"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("GunParticles:process_material:scale_min")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [1.0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("GunParticles:process_material:scale_max")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [1.0]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("GunParticles:material_override:shader_parameter/texture_scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(1, 1)]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("GunParticles:material_override")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [SubResource("ShaderMaterial_6peo3")]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_mkkkb"]
_data = {
"Hit": SubResource("Animation_8e2hb"),
"RESET": SubResource("Animation_kjdyj")
}

[node name="Projectile" type="CharacterBody3D"]
collision_layer = 0
script = ExtResource("1_xhpbw")
Speed = 60.0

[node name="Collider" type="CollisionShape3D" parent="."]
shape = SubResource("SphereShape3D_2tuna")

[node name="DestroyTimer" type="Timer" parent="."]
wait_time = 2.0
autostart = true

[node name="GunParticles" type="GPUParticles3D" parent="."]
material_override = SubResource("ShaderMaterial_6peo3")
cast_shadow = 0
amount = 50
randomness = 0.74
draw_order = 1
process_material = SubResource("ParticleProcessMaterial_pt078")
draw_pass_1 = SubResource("QuadMesh_usn1t")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_mkkkb")
}

[connection signal="timeout" from="DestroyTimer" to="." method="OnTimeout"]
